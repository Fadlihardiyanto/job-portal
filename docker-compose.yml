version: "3.9"

services:
  postgres:
    container_name: postgres
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: job_portal
    ports:
      - "5432:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - local-network
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    networks:
      - local-network
    restart: unless-stopped

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.4.6
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - local-network
    restart: unless-stopped

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.4.6
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - local-network
    restart: unless-stopped

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8070:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:19092
      KAFKA_CLUSTERS_0_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - local-network
    restart: unless-stopped

  user-service:
    container_name: user-service
    build:
      context: ./user-service
    command: ["/web"]
    ports:
      - "5000:5000"
    env_file:
      - ./user-service/.env
    depends_on:
      - postgres
      - kafka
    networks:
      - local-network
    restart: unless-stopped

  user-worker:
    container_name: user-worker
    build:
      context: ./user-service
    command: ["/worker"]
    env_file:
      - ./user-service/.env
    depends_on:
      - kafka
    networks:
      - local-network
    restart: unless-stopped

  company-service:
    container_name: company-service
    build:
      context: ./company-service
    command: ["/web"]
    ports:
      - "4000:4000"
    env_file:
      - ./company-service/.env
    depends_on:
      - postgres
      - kafka
    networks:
      - local-network
    restart: unless-stopped

  company-worker:
    container_name: company-worker
    build:
      context: ./company-service
    command: ["/worker"]
    env_file:
      - ./company-service/.env
    depends_on:
      - kafka
    networks:
      - local-network
    restart: unless-stopped

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
    ports:
      - "3000:3000"
    env_file:
      - ./api-gateway/.env
    depends_on:
      - user-service
      - company-service
    networks:
      - local-network
    restart: unless-stopped

networks:
  local-network:
    driver: bridge

volumes:
  postgresql_data:
